"""
M√ú≈ûTERƒ∞ ALI≈ûVERƒ∞≈û PANELƒ∞
"""
import streamlit as st
import pandas as pd
from datetime import datetime
from db import (
    get_all_magazalar, get_stok_by_magaza, get_all_musteriler, 
    add_musteri, add_siparis, add_siparis_detay, update_stok_adet,
    get_musteri_siparisleri, get_siparis_detaylari, create_tables_if_not_exists
)

st.title("üõí M√º≈üteri Alƒ±≈üveri≈ü Paneli")

# Veritabanƒ± tablolarƒ±nƒ± olu≈ütur (eƒüer yoksa)
try:
    create_tables_if_not_exists()
except:
    pass  # Tablolar zaten varsa hata vermez

# Session state'leri ba≈ülat
if "sepet" not in st.session_state:
    st.session_state.sepet = {}
if "secilen_musteri_id" not in st.session_state:
    st.session_state.secilen_musteri_id = None
if "siparis_tamamlandi" not in st.session_state:
    st.session_state.siparis_tamamlandi = False

try:
    # Sidebar - M√º≈üteri Se√ßimi/Ekleme
    with st.sidebar:
        st.subheader("üë§ M√º≈üteri Bilgileri")
        
        musteriler = get_all_musteriler()
        
        if musteriler:
            musteri_secimi = st.radio("M√º≈üteri Se√ßimi:", ["Mevcut M√º≈üteri", "Yeni M√º≈üteri"])
            
            if musteri_secimi == "Mevcut M√º≈üteri":
                musteri_dict = {m[0]: f"{m[1]} - {m[2] or 'Tel: Yok'}" for m in musteriler}
                secilen_id = st.selectbox(
                    "M√º≈üteri Se√ßin:",
                    options=list(musteri_dict.keys()),
                    format_func=lambda x: musteri_dict[x]
                )
                st.session_state.secilen_musteri_id = secilen_id
                
                # Se√ßilen m√º≈üteri bilgileri
                secilen_musteri = next(m for m in musteriler if m[0] == secilen_id)
                st.info(f"**{secilen_musteri[1]}**\n\nüìû {secilen_musteri[2] or 'Telefon yok'}\n\nüìß {secilen_musteri[3] or 'Email yok'}")
                
        else:
            st.info("Hen√ºz m√º≈üteri kaydƒ± yok")
            musteri_secimi = "Yeni M√º≈üteri"
        
        # Yeni m√º≈üteri ekleme
        if not musteriler or musteri_secimi == "Yeni M√º≈üteri":
            with st.form("yeni_musteri_form"):
                st.write("**Yeni M√º≈üteri Ekle**")
                isim = st.text_input("Ad Soyad*", placeholder="√ñrn: Ahmet Yƒ±lmaz")
                telefon = st.text_input("Telefon", placeholder="0555 123 45 67")
                email = st.text_input("Email", placeholder="ornek@email.com")
                adres = st.text_area("Adres", placeholder="Ev/i≈ü adresi")
                
                if st.form_submit_button("M√º≈üteri Ekle", type="primary"):
                    if isim.strip():
                        try:
                            yeni_musteri_id = add_musteri(isim.strip(), telefon.strip() or None, 
                                                        email.strip() or None, adres.strip() or None)
                            st.session_state.secilen_musteri_id = yeni_musteri_id
                            st.success(f"‚úÖ {isim} m√º≈üteri olarak eklendi!")
                            st.rerun()
                        except Exception as e:
                            st.error(f"M√º≈üteri eklenirken hata: {e}")
                    else:
                        st.warning("Ad soyad gerekli!")

    # Ana sayfa - Maƒüaza ve √úr√ºn Se√ßimi
    if st.session_state.secilen_musteri_id:
        # Maƒüaza se√ßimi
        magazalar = get_all_magazalar()
        if not magazalar:
            st.error("Hi√ß maƒüaza bulunamadƒ±!")
            st.stop()
        
        magazalar_dict = {m[0]: m[1] for m in magazalar}
        secilen_magaza_id = st.selectbox(
            "üè™ Alƒ±≈üveri≈ü yapƒ±lacak maƒüazayƒ± se√ßin:",
            options=list(magazalar_dict.keys()),
            format_func=lambda x: magazalar_dict[x]
        )
        
        # Se√ßilen maƒüazanƒ±n stoklarƒ±
        stoklar = get_stok_by_magaza(secilen_magaza_id)
        
        if not stoklar:
            st.warning(f"{magazalar_dict[secilen_magaza_id]} maƒüazasƒ±nda stok bulunmuyor!")
        else:
            # Stoklarƒ± g√∂ster ve sepete ekleme
            st.subheader(f"üõçÔ∏è {magazalar_dict[secilen_magaza_id]} - √úr√ºnler")
            
            # √úr√ºnleri tablo halinde g√∂ster
            df_stok = pd.DataFrame(stoklar, columns=["ID", "√úr√ºn", "Stok", "Fiyat", "Maƒüaza ID"])
            df_display = df_stok[df_stok["Stok"] > 0].copy()  # Sadece stokta olanlar
            
            if df_display.empty:
                st.warning("Bu maƒüazada satƒ±labilir √ºr√ºn yok!")
            else:
                df_display["Fiyat"] = df_display["Fiyat"].apply(lambda x: f"{x:.2f} ‚Ç∫")
                df_display = df_display.drop(columns=["ID", "Maƒüaza ID"])
                st.dataframe(df_display, use_container_width=True)
                
                # √úr√ºn se√ßimi ve sepete ekleme
                st.subheader("‚ûï Sepete √úr√ºn Ekle")
                
                col1, col2, col3 = st.columns([2, 1, 1])
                
                # Stokta olan √ºr√ºnleri filtrele
                mevcut_stoklar = [s for s in stoklar if s[2] > 0]
                stok_dict = {s[0]: s for s in mevcut_stoklar}
                
                with col1:
                    if mevcut_stoklar:
                        secilen_urun_id = st.selectbox(
                            "√úr√ºn Se√ßin:",
                            options=list(stok_dict.keys()),
                            format_func=lambda x: f"{stok_dict[x][1]} - {stok_dict[x][3]:.2f}‚Ç∫ (Stok: {stok_dict[x][2]})"
                        )
                    else:
                        st.warning("Sepete eklenebilecek √ºr√ºn yok!")
                        secilen_urun_id = None
                
                with col2:
                    if secilen_urun_id:
                        max_adet = stok_dict[secilen_urun_id][2]
                        secilen_adet = st.number_input(
                            "Adet:", 
                            min_value=1, 
                            max_value=max_adet, 
                            value=1,
                            key="adet_secim"
                        )
                    else:
                        secilen_adet = 0
                
                with col3:
                    if secilen_urun_id and st.button("üõí Sepete Ekle", type="primary"):
                        urun = stok_dict[secilen_urun_id]
                        
                        # Sepetteki mevcut adet kontrol√º
                        sepetteki_adet = st.session_state.sepet.get(secilen_urun_id, {}).get('adet', 0)
                        toplam_adet = sepetteki_adet + secilen_adet
                        
                        if toplam_adet <= urun[2]:
                            if secilen_urun_id in st.session_state.sepet:
                                st.session_state.sepet[secilen_urun_id]['adet'] += secilen_adet
                            else:
                                st.session_state.sepet[secilen_urun_id] = {
                                    'isim': urun[1],
                                    'adet': secilen_adet,
                                    'birim_fiyat': urun[3],
                                    'magaza_id': urun[4]
                                }
                            st.success(f"‚úÖ {urun[1]} sepete eklendi!")
                            st.rerun()
                        else:
                            st.error(f"‚ùå Yetersiz stok! Maksimum {urun[2]} adet alabilirsiniz.")

        # Sepet G√∂r√ºnt√ºleme
        st.subheader("üõí Sepetim")
        
        if not st.session_state.sepet:
            st.info("Sepetiniz bo≈ü. Yukarƒ±dan √ºr√ºn ekleyebilirsiniz.")
        else:
            toplam_fiyat = 0
            
            # Sepet tablosu
            sepet_data = []
            for urun_id, urun_info in st.session_state.sepet.items():
                ara_toplam = urun_info['adet'] * urun_info['birim_fiyat']
                toplam_fiyat += ara_toplam
                sepet_data.append({
                    "√úr√ºn": urun_info['isim'],
                    "Adet": urun_info['adet'],
                    "Birim Fiyat": f"{urun_info['birim_fiyat']:.2f} ‚Ç∫",
                    "Ara Toplam": f"{ara_toplam:.2f} ‚Ç∫"
                })
            
            df_sepet = pd.DataFrame(sepet_data)
            st.dataframe(df_sepet, use_container_width=True)
            
            # Toplam fiyat
            st.markdown(f"### üí∞ **Toplam: {toplam_fiyat:.2f} ‚Ç∫**")
            
            # Sepet i≈ülemleri
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("üóëÔ∏è Sepeti Temizle", type="secondary"):
                    st.session_state.sepet = {}
                    st.rerun()
            
            with col2:
                # √úr√ºn √ßƒ±karma
                if len(st.session_state.sepet) > 0:
                    cikarilacak_urun = st.selectbox(
                        "√áƒ±karƒ±lacak √ºr√ºn:",
                        options=list(st.session_state.sepet.keys()),
                        format_func=lambda x: st.session_state.sepet[x]['isim']
                    )
                    if st.button("‚ûñ √úr√ºnden √áƒ±kar"):
                        if st.session_state.sepet[cikarilacak_urun]['adet'] > 1:
                            st.session_state.sepet[cikarilacak_urun]['adet'] -= 1
                        else:
                            del st.session_state.sepet[cikarilacak_urun]
                        st.rerun()
            
            with col3:
                if st.button("‚úÖ Sipari≈üi Tamamla", type="primary"):
                    try:
                        # Sipari≈ü olu≈ütur
                        siparis_tarihi = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                        siparis_id = add_siparis(
                            st.session_state.secilen_musteri_id,
                            secilen_magaza_id,
                            toplam_fiyat,
                            siparis_tarihi
                        )
                        
                        # Sipari≈ü detaylarƒ±nƒ± ekle ve stoklarƒ± g√ºncelle
                        for urun_id, urun_info in st.session_state.sepet.items():
                            # Sipari≈ü detayƒ± ekle
                            add_siparis_detay(
                                siparis_id,
                                urun_id,
                                urun_info['adet'],
                                urun_info['birim_fiyat']
                            )
                            
                            # Stoktan d√º≈ü
                            mevcut_stok = next(s for s in stoklar if s[0] == urun_id)
                            yeni_adet = mevcut_stok[2] - urun_info['adet']
                            update_stok_adet(urun_id, yeni_adet)
                        
                        # Ba≈üarƒ± mesajƒ±
                        st.success(f"üéâ Sipari≈ü ba≈üarƒ±yla olu≈üturuldu! Sipari≈ü No: #{siparis_id}")
                        st.balloons()
                        
                        # Sepeti temizle
                        st.session_state.sepet = {}
                        st.session_state.siparis_tamamlandi = True
                        st.rerun()
                        
                    except Exception as e:
                        st.error(f"Sipari≈ü olu≈üturulurken hata: {e}")

        # M√º≈üteri ge√ßmi≈ü sipari≈üleri
        if st.session_state.secilen_musteri_id:
            with st.expander("üìã Ge√ßmi≈ü Sipari≈ülerim"):
                gecmis_siparisler = get_musteri_siparisleri(st.session_state.secilen_musteri_id)
                
                if gecmis_siparisler:
                    for siparis in gecmis_siparisler:
                        with st.container():
                            col1, col2, col3 = st.columns([2, 1, 1])
                            with col1:
                                st.write(f"**Sipari≈ü #{siparis[0]}** - {siparis[3]}")
                            with col2:
                                st.write(f"üí∞ {siparis[1]:.2f} ‚Ç∫")
                            with col3:
                                st.write(f"üìÖ {siparis[2]}")
                            
                            # Sipari≈ü detaylarƒ±nƒ± g√∂ster
                            detaylar = get_siparis_detaylari(siparis[0])
                            if detaylar:
                                detay_str = ", ".join([f"{d[2]} ({d[0]}x)" for d in detaylar])
                                st.caption(f"√úr√ºnler: {detay_str}")
                            st.divider()
                else:
                    st.info("Hen√ºz sipari≈ü ge√ßmi≈üiniz bulunmuyor.")
    
    else:
        st.info("üëÜ L√ºtfen √∂nce soldaki panelden m√º≈üteri se√ßin veya yeni m√º≈üteri ekleyin.")

except Exception as e:
    st.error(f"‚ùå Bir hata olu≈ütu: {e}")
    
    # Debug paneli
    with st.expander("üîß Hata Detaylarƒ±"):
        import traceback
        st.text(traceback.format_exc())